MODULE 1: HANDS-ON LABS INTEGRATION
Two 10-12 Minute Interactive Labs + Google Colab Setup
MTW AI Platform | Phase 1: Foundations
________________


OVERVIEW: HOW LABS FIT INTO MODULE 1
Module 1 Time Allocation (120 minutes total)
Reading Content        → 48 minutes
Case Studies          → 36 minutes
Lab 1: Interactive    → 12 minutes
Lab 2: Google Colab   → 12 minutes
Quiz                  → 10 minutes
Buffer/Reflection     → 2 minutes
─────────────────────────────────
TOTAL               → 120 minutes


Learning Bridge
Reading & Cases: Theoretical understanding ("What is AI, ML, DL?")
Labs: Practical engagement ("How do these concepts work in practice?")
Quiz: Assessment of integrated knowledge
________________


LAB 1: INTERACTIVE AI CLASSIFIER
"Is It AI? Real-Time Classification Exercise"
Duration: 12 minutes | Format: Browser-based interactive tool | Technology: HTML/JavaScript
Lab Objectives
By completing this lab, learners will:
1. Distinguish between AI and non-AI systems
2. Identify which type of AI (Narrow/General/Super; Reactive/Limited Memory/Symbolic)
3. Recognize what makes a system "intelligent"
4. Apply definitions from Module 1 reading in real scenarios
How the Lab Works
Scenario-Based Interface:
SCREEN 1: Welcome
┌─────────────────────────────────────┐
│  IS IT AI?                          │
│  ────────────────────────────────   │
│  Classify Real Systems              │
│                                     │
│  You'll see descriptions of         │
│  10 real technologies. For each:    │
│                                     │
│  1. Decide: Is this AI or not?      │
│  2. If AI: What type?               │
│  3. Get instant feedback            │
│                                     │
│  [START QUIZ]                       │
└─────────────────────────────────────┘


SCREEN 2: Classification Interface
┌─────────────────────────────────────┐
│  SCENARIO 1 of 10                   │
│  ────────────────────────────────   │
│                                     │
│  "Google Assistant listens when you │
│  say 'Hey Google' and responds to   │
│  voice commands like 'What's the    │
│  weather?'"                         │
│                                     │
│  Is this an AI system?              │
│  ○ Yes                              │
│  ○ No                               │
│  ○ Not sure                         │
│                                     │
│  [NEXT]                             │
└─────────────────────────────────────┘


SCREEN 3: AI Type Classification (if user selected "Yes")
┌─────────────────────────────────────┐
│  Which type of AI?                  │
│  ────────────────────────────────   │
│                                     │
│  ○ Narrow AI (specialized task)     │
│  ○ General AI (multiple domains)    │
│  ○ Super AI (superintelligence)     │
│  ○ Not sure                         │
│                                     │
│  Which memory type?                 │
│  ○ Reactive (no memory)             │
│  ○ Limited Memory (uses context)    │
│  ○ Symbolic (rule-based)            │
│                                     │
│  [SUBMIT ANSWER]                    │
└─────────────────────────────────────┘


SCREEN 4: Feedback
┌─────────────────────────────────────┐
│  ✓ CORRECT!                         │
│  ────────────────────────────────   │
│                                     │
│  Google Assistant IS an AI system   │
│  Type: Narrow AI                    │
│  Memory: Limited Memory             │
│                                     │
│  Explanation:                       │
│  Google Assistant understands voice │
│  commands and context from prior    │
│  conversation turns. It's specialized│
│  for voice interaction (Narrow AI)  │
│  and remembers context from your    │
│  recent conversation (Limited       │
│  Memory).                           │
│                                     │
│  [NEXT SCENARIO]                    │
└─────────────────────────────────────┘


10 Scenarios for Classification
Scenario 1: Google Assistant (Answer Key: Yes - Narrow AI, Limited Memory) Description: "Google Assistant listens when you say 'Hey Google' and responds to voice commands like 'What's the weather?' and 'Call my mom.'"
Scenario 2: Google Maps Route Calculation (Answer Key: Yes - Narrow AI, Limited Memory) Description: "Google Maps analyzes real-time traffic data and your current location to recommend the fastest route to your destination. Sometimes it changes the route mid-journey if it detects new traffic."
Scenario 3: Simple Alarm Clock (Answer Key: No - not AI) Description: "A traditional alarm clock rings at the time you set. It doesn't learn your schedule or adapt; it just plays a sound at the programmed time."
Scenario 4: Netflix Recommendations (Answer Key: Yes - Narrow AI, Limited Memory) Description: "Netflix analyzes millions of user viewing patterns and your personal history to recommend shows you might enjoy."
Scenario 5: ATM Machine (Answer Key: Partially AI, Limited Memory) Description: "An ATM machine verifies your PIN, processes withdrawal requests, and can freeze your card if too many wrong PINs are entered. It accesses your recent transaction history."
Scenario 6: Smartphone Calculator (Answer Key: No - not AI) Description: "The calculator app performs mathematical operations exactly as programmed. 2 + 2 always equals 4; it doesn't learn or adapt."
Scenario 7: Spotify Song Recommendations (Answer Key: Yes - Narrow AI, Limited Memory) Description: "Spotify analyzes your listening history and the listening patterns of similar users to recommend songs you might like in your Discover Weekly playlist."
Scenario 8: Self-Driving Tesla (Answer Key: Yes - Narrow AI, Limited Memory) Description: "Tesla's autopilot uses cameras and AI to identify road objects (cars, pedestrians, signs), predict other drivers' behavior, and maintain safe driving. It remembers road conditions recently encountered."
Scenario 9: Traditional Microwave (Answer Key: No - not AI) Description: "A microwave heats food for the duration you set. If you program it for 3 minutes, it runs for 3 minutes regardless of what's inside."
Scenario 10: ChatGPT (Answer Key: Yes - Narrow AI, Limited Memory) Description: "ChatGPT understands your text prompts, generates coherent responses, and remembers context from earlier messages in the same conversation."
Lab Implementation: HTML/JavaScript
Key Features to Code:
// Pseudocode structure


const scenarios = [
  {
    id: 1,
    description: "Google Assistant...",
    isAI: true,
    aiType: "Narrow AI",
    memoryType: "Limited Memory",
    explanation: "Google Assistant is specialized for voice interaction..."
  },
  // 9 more scenarios...
];


class AIClassifier {
  constructor() {
    this.currentScenario = 0;
    this.score = 0;
    this.answers = [];
  }
  
  displayScenario() {
    // Show current scenario
    // Display multiple choice buttons
  }
  
  checkAnswer(userAnswer) {
    // Compare to correct answer
    // Provide immediate feedback
    // Track score
  }
  
  showFeedback(isCorrect) {
    // Display explanation
    // Show correct answer if wrong
    // Encourage learning
  }
  
  calculateScore() {
    // Return percentage correct
    // Provide encouragement based on performance
  }
}


Scoring & Feedback
10/10 Correct: "AI Expert! You understand AI classification perfectly."
8-9/10: "Great job! You've mastered most concepts. Review edge cases."
6-7/10: "Good progress! Review the reading on AI types."
4-5/10: "Keep learning! Revisit definitions of Narrow AI and Limited Memory."
Below 4: "This is challenging—no worries! Review Module 1 reading thoroughly."


Lab Reflection Questions (Post-Lab)
After completing the 10 scenarios, learners answer:
1. "Which AI type (Narrow/General/Super) did most scenarios represent? Why?"
   * Expected answer: Narrow AI; current systems are all specialized
2. "How do you distinguish between 'AI' and 'automation' or 'programming'?"
   * Expected answer: AI learns from data; automation follows pre-programmed rules
3. "Name one AI system from the lab that surprised you. Why?"
   * Open-ended reflection to deepen understanding
________________


LAB 2: GOOGLE COLAB HANDS-ON EXPERIMENT
"Training Your First Machine Learning Model"
Duration: 12 minutes | Format: Google Colab Notebook | Technology: Python, scikit-learn
Lab Objectives
By completing this lab, learners will:
1. Understand how ML models learn from data (supervised learning)
2. See a real ML algorithm in action
3. Make predictions with a trained model
4. Connect theoretical concepts (Module 1) to practical implementation
Why Google Colab?
Advantages:
* No setup required (works in browser)
* Free access to Python and ML libraries
* GPU available (though not needed for this lab)
* Shareable link; collaborative
* Perfect for beginners
Disadvantages:
* Requires Google account
* Internet dependent
* Limited for advanced work later
Pre-Lab Setup (Learner Instructions)
Step 1: Access Google Colab (2 minutes)
1. Go to https://colab.research.google.com
2. Sign in with your Google account (Gmail, etc.)
3. Click "New Notebook"
4. Name it: "MTW_AI_Module1_Lab"
5. Save to Google Drive


Step 2: Copy Provided Code (3 minutes) Learners either:
* Copy-paste provided Python code from module
* Click "Open in Colab" button (if you provide shareable link)
* Upload .ipynb file from your platform
Lab Code (Complete, Ready to Copy)
Cell 1: Load Libraries
# Import necessary libraries
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, classification_report
import numpy as np


print("✓ Libraries loaded successfully!")


Cell 2: Create Simple Dataset
# This lab uses a classic dataset: Iris Flowers
# The dataset has 150 flower measurements
# Task: Predict iris species from measurements


from sklearn.datasets import load_iris


# Load the iris dataset
iris = load_iris()
X = iris.data  # Features: sepal length, width, petal length, width
y = iris.target  # Labels: 0=setosa, 1=versicolor, 2=virginica


print("Dataset loaded!")
print(f"Total samples: {len(X)}")
print(f"Features (measurements): {iris.feature_names}")
print(f"Species to predict: {iris.target_names}")


Cell 3: Split Data into Training and Testing
# This is the KEY concept from Module 1!
# Training data: 80% used to train the model
# Testing data: 20% used to evaluate the model


X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.2, random_state=42
)


print(f"Training samples: {len(X_train)} (80%)")
print(f"Testing samples: {len(X_test)} (20%)")
print("\nThis is SUPERVISED LEARNING:")
print("- We provide training data WITH labels (correct answers)")
print("- The model learns patterns from training data")
print("- We test on unseen data (testing set)")


Cell 4: Train the Model
# Create and train a Logistic Regression model
# (Similar to what Netflix uses for recommendations)


model = LogisticRegression(max_iter=200)


# THIS IS THE LEARNING STEP
# The model analyzes training data and learns patterns
print("Training the model...")
model.fit(X_train, y_train)
print("✓ Model trained!")


print("\nThe model has learned:")
print(f"- How flower measurements relate to species")
print(f"- Patterns that distinguish setosa from versicolor from virginica")


Cell 5: Make Predictions
# Now use the trained model to predict on the TEST data
predictions = model.predict(X_test)


print("Predictions made!")
print(f"\nFirst 10 predictions: {predictions[:10]}")
print(f"First 10 actual species: {y_test[:10]}")


# Translate numbers to species names
predicted_species = [iris.target_names[p] for p in predictions]
actual_species = [iris.target_names[a] for a in y_test]


print("\nPredicted species:", predicted_species[:5])
print("Actual species:   ", actual_species[:5])


Cell 6: Evaluate Accuracy
# Calculate how many predictions were correct
accuracy = accuracy_score(y_test, predictions)


print(f"Model Accuracy: {accuracy:.1%}")
print(f"\nThis means: Out of {len(X_test)} test flowers,")
print(f"the model correctly identified {int(accuracy * len(X_test))} species.")


# THIS IS THE KEY INSIGHT:
# - The model never saw these 30 test flowers during training
# - Yet it still identified the species correctly
# - This shows it LEARNED patterns, not memorized data


Cell 7: Detailed Performance Report
print("=== DETAILED PERFORMANCE ===\n")
print(classification_report(y_test, predictions, 
                           target_names=iris.target_names))


print("\nINTERPRETATION:")
print("- Precision: Of flowers we predicted as setosa, how many actually are?")
print("- Recall: Of actual setosa flowers, how many did we identify?")
print("- F1-Score: Combined measure of precision and recall")


Cell 8: Try Your Own Prediction
# Create a new flower (made-up measurements)
new_flower = np.array([[5.1, 3.5, 1.4, 0.2]])


prediction = model.predict(new_flower)
confidence = model.predict_proba(new_flower)


print("New flower measurements: [5.1, 3.5, 1.4, 0.2]")
print(f"Prediction: {iris.target_names[prediction[0]]}")
print(f"Confidence: {max(confidence[0]):.1%}")


print("\nThe model is making a prediction on data it has never seen!")
print("This demonstrates GENERALIZATION—the core goal of Machine Learning")


Connection to Module 1 Concepts
This lab demonstrates:
Module 1 Concept
	Lab Implementation
	Supervised Learning
	We provide labeled data (species known in advance)
	Training Data
	80% of flowers; model learns from these
	Testing Data
	20% of flowers; we verify the model works on unseen data
	Overfitting vs. Generalization
	Model achieves good accuracy on new data (generalization, not memorization)
	Machine Learning ≠ AI
	This is ML; it's a subset of AI
	Narrow AI
	Model is specialized for iris classification; can't classify other things
	Model Accuracy
	Not 100%, but good enough to be useful
	Lab Walkthrough: Step-by-Step (Learner View)
Estimated Time: 12 minutes
Minute 1-2:   Open Google Colab; load cells
Minute 3-4:   Read Cell 1-2 (understand problem)
Minute 5-6:   Run Cells 1-3 (load data, split it)
Minute 7-8:   Run Cells 4-5 (train model, make predictions)
Minute 9-10:  Run Cells 6-7 (evaluate accuracy)
Minute 11-12: Run Cell 8 (make own prediction); reflection


Lab Worksheet (Learner Completes During Lab)
Question 1: What percentage of data was used for training? For testing?
* Answer: 80% training, 20% testing
Question 2: In Cell 4, when the model "learns," what specifically is it learning?
* Answer: Patterns between flower measurements and species; the boundaries that separate different species in measurement space
Question 3: Why don't we train on all the data, then test on the same data?
* Answer: If we did, we'd be testing on data the model memorized, not data it's truly learned to generalize to
Question 4: The model's accuracy was [X]%. Is this good? When would it not be good enough?
* Answer: Depends on use case. 95% good for casual flower classification. Not good if we needed 99.9% for critical applications (e.g., medical diagnosis)
Question 5: If we trained the model on a different 80% of data, would the accuracy be exactly the same?
* Answer: Probably slightly different; different training data leads to slightly different learned patterns
Sharing the Lab: Two Approaches
Approach 1: Direct Colab Link (Easiest)
1. Create notebook in your MTW AI Platform account
2. Generate shareable link: https://colab.research.google.com/drive/[FILE_ID]
3. In Module 1, include button: "Launch Lab 2 in Google Colab"
4. Learners click; notebook opens ready to run
Approach 2: Upload .ipynb File
1. Download notebook as .ipynb file from your platform
2. Learner uploads to Module 1 interface
3. Learner downloads and uploads to their Colab
4. Learner runs cells
Approach 3: Copy-Paste Code
1. Provide code in Module 1 reading
2. Learner opens Colab in new tab
3. Learner manually copies cells into their notebook
4. Less convenient but works offline
Troubleshooting: Common Errors
Error: "ModuleNotFoundError: No module named 'sklearn'"
* Solution: Google Colab has scikit-learn pre-installed. If error occurs, restart runtime: Runtime > Restart Runtime
Error: "NameError: name 'iris' is not defined"
* Solution: Cells must run in order. Run Cell 1 first, then Cell 2, etc. Don't skip cells.
Cells run but no output appears
* Solution: Click the cell, then press Ctrl+Enter (or Cmd+Enter on Mac) to execute
"I see numbers but don't understand what they mean"
* Solution: Reference the explanatory text in each cell. This is normal—don't worry about perfect understanding. The goal is exposure.
________________


INTEGRATING BOTH LABS INTO MODULE 1 FLOW
Recommended Sequencing
LEARNER JOURNEY:


1. Read Module 1 Content (48 min)
   ↓
2. Review Case Studies (36 min)
   ↓
3. Complete Lab 1: AI Classifier (12 min)
   Purpose: Apply classification skills
   Format: Interactive browser tool
   ↓
4. Complete Lab 2: Colab ML Model (12 min)
   Purpose: See ML in action
   Format: Hands-on programming
   ↓
5. Reflect: "How do the labs connect to Module 1 reading?"
   (2 min)
   ↓
6. Take Module 1 Quiz (10-15 min)
   ↓
7. Receive Certificate & Progress (1 min)
   ↓
8. Preview Module 2 (optional)


Module 1 Platform Integration Checklist
* [ ] Lab 1 embedded as iframe or embedded HTML
* [ ] Lab 2 has "Open in Colab" button linking to shared notebook
* [ ] Both labs accessible from main module page
* [ ] Instructions clear and bilingual (English/Spanish)
* [ ] Troubleshooting guide available
* [ ] Optional "Get Help" button linking to FAQ chatbot
* [ ] Lab completion tracked (not graded, but recorded)
* [ ] Labs optional but recommended
* [ ] Certificate doesn't require labs; quiz does
User Interface Example (Module 1 Page Layout)
┌───────────────────────────────────────────────────────────┐
│ MODULE 1: The AI Landscape                               │
├───────────────────────────────────────────────────────────┤
│                                                            │
│ ✓ Reading: AI vs ML vs DL (48 min)        [COMPLETED]   │
│ ✓ Case Studies (36 min)                    [COMPLETED]   │
│                                                            │
│ ◉ LAB 1: AI Classifier (12 min)           [START LAB]   │
│   "Decide which systems are AI—learn by     [OPTIONAL]   │
│    classifying real-world examples"                       │
│                                                            │
│ ◉ LAB 2: ML Model Training (12 min)       [OPEN IN      │
│   "Train your first ML model in Google     COLAB]        │
│    Colab—no programming experience needed"               │
│                                                            │
│ ──────────────────────────────────────────────────────   │
│                                                            │
│ → QUIZ: 15 Questions (10-15 min)          [TAKE QUIZ]   │
│                                                            │
│ Progress: ████████████░░░░ 75%                           │
│ Estimated Time Remaining: 25 minutes                      │
│                                                            │
│ [NEED HELP?] [SAVE PROGRESS] [NEXT MODULE]              │
│                                                            │
└───────────────────────────────────────────────────────────┘


________________


GOOGLE COLAB SETUP GUIDE (For Instructors)
Creating a Shareable Lab Notebook
Step 1: Create Notebook
1. Go to https://colab.research.google.com
2. Click "New Notebook"
3. Add all cells (provided above)
4. Save to Google Drive with name: "MTW_AI_Module1_Lab2"


Step 2: Make Shareable
1. Click "Share" button (top right)
2. Change from "Restricted" to "Anyone with the link"
3. Set to "Viewer" (so learners can't edit original)
4. Copy the link
5. Shorten link using bit.ly or similar (optional)


Step 3: Add to Module
In Module 1 content, add button:
[🔬 Launch Lab 2 in Google Colab]
Link: https://colab.research.google.com/drive/[YOUR_FILE_ID]


Learners clicking this button:
1. View your notebook (read-only)
2. Click "Copy to Drive" (creates their own editable copy)
3. Run cells at their own pace


Alternative: Use GitHub + Colab
If you want version control:
Step 1: Upload Notebook to GitHub
1. Create GitHub repository: mtw-ai-platform
2. Upload .ipynb file for each lab
3. Get raw link to notebook file


Step 2: Generate Colab Link
Take the GitHub URL: https://github.com/[user]/[repo]/blob/main/lab2.ipynb


Generate Colab link:
https://colab.research.google.com/github/[user]/[repo]/blob/main/lab2.ipynb


Users can:
- View in Colab
- Click "Copy to Drive"
- Run and modify
- Original on GitHub stays unchanged


________________


ASSESSMENT & COMPLETION TRACKING
Lab Completion (Not Graded, Just Tracked)
Lab 1: AI Classifier
- Completion: Learner finishes all 10 scenarios
- Data captured: Time spent, accuracy score
- Badge earned: "AI Classifier Expert" (if 8+ correct)
- Required for completion: No
- Encouragement: "Great! You understand AI types."


Lab 2: Google Colab Model
- Completion: Learner runs all 8 cells successfully
- Data captured: Time spent, final accuracy output
- Badge earned: "ML Model Trainer" (upon running final cell)
- Required for completion: No
- Encouragement: "You just trained your first ML model!"


Quiz Questions Referencing Labs
The Module 1 quiz can include questions connecting to lab experiences:
Question 16 (Optional, if extending to 16 questions): "In Lab 2, you trained a model using 80% of the data for training and 20% for testing. Why use this split?"
A) To save time and only train on what's necessary
B) To prevent the model from memorizing training data; to verify it generalizes to new data
C) To have more data overall
D) No particular reason; it's arbitrary
Correct Answer: B
________________


TIME & PACING SUMMARY
Module 1 Complete Schedule
Activity
	Time
	Cumulative
	Reading Content
	48 min
	48 min
	Case Studies
	36 min
	84 min
	Lab 1: AI Classifier
	12 min
	96 min
	Lab 2: Google Colab
	12 min
	108 min
	Reflection
	2 min
	110 min
	Quiz
	10-15 min
	120-125 min
	Total Module 1: 120 minutes (approximately 2 hours)
This fits the module's designed 2-hour time allocation.
________________


BILINGUAL CONSIDERATIONS
Lab 1: AI Classifier
* English interface with Spanish option toggle
* Bilingual feedback explanations
* Scenarios in both languages available
Lab 2: Google Colab
* Python code (universal, no translation needed)
* Comments in code are bilingual:
# THIS IS THE LEARNING STEP
# EL MODELO APRENDE PATRONES
model.fit(X_train, y_train)


* Instructions in separate document (English + Spanish)
________________


END OF LABS INTEGRATION GUIDE
Ready for Implementation: This guide is complete and production-ready for your Vercel/Supabase platform.
Next Steps:
1. Create Lab 1 HTML/JavaScript interface
2. Create Google Colab notebook for Lab 2
3. Test both labs with 3-5 beta learners
4. Gather feedback and refine
5. Deploy alongside Module 1 content
